# Многоэтапная сборка для production
FROM node:18-alpine AS backend-build

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем package.json и package-lock.json
COPY package*.json ./

# Устанавливаем зависимости
RUN npm install && npm ci --only=production && npm cache clean --force

# Копируем исходный код backend
COPY server.js ./
COPY routes/ ./routes/
COPY middleware/ ./middleware/
COPY config/ ./config/
COPY migrations/ ./migrations/
COPY seeds/ ./seeds/
COPY utils/ ./utils/

# Создаем директории для uploads и logs
RUN mkdir -p uploads logs

# Финальный образ
FROM node:18-alpine

# Устанавливаем необходимые системные пакеты
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    && rm -rf /var/cache/apk/*

# Создаем пользователя app
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем приложение из стадии сборки
COPY --from=backend-build --chown=nextjs:nodejs /app ./

# Создаем директории с правильными правами
RUN mkdir -p uploads logs && chown -R nextjs:nodejs uploads logs

# Переключаемся на пользователя app
USER nextjs

# Указываем переменные окружения для Puppeteer
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
    NODE_ENV=production

# Открываем порт
EXPOSE 3000

# Команда запуска
CMD ["node", "server.js"]
